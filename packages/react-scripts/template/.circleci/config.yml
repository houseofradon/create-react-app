version: 2

jobs:
  prepare:
    docker: 
      - image: circleci/node:8.11.2
    working_directory: ~/radon
    steps:
      - checkout
      - attach_workspace:
          at: ~/radon
      - restore_cache:
          key: yarn-dependencies-{{ checksum "package.json" }}
      - restore_cache:
          key: npm-dependencies-{{ checksum "renderer/package.json" }}
      - run:
          name: install dependencies
          command: yarn install
      - run:
          name: install renderer dependencies
          command: npm install
          working_directory: ./renderer
      - run:
          name: build renderer
          command: npm run build
          working_directory: ./renderer
      - run:
          name: mark scripts executable
          command: chmod +x ./.circleci/set-stage-variable.sh
      - save_cache:
          key: yarn-dependencies-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - ~/.cache/yarn
      - save_cache:
          key: npm-dependencies-{{ checksum "renderer/package.json" }}
          paths:
            - ./renderer/node_modules
      - persist_to_workspace:
          root: .
          paths: 
            - .

  test:
    docker: 
      - image: circleci/node:8.11.2
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: test
          command: yarn test --coverage

  flow:
    docker: 
      - image: circleci/node:8.11.2
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: flow
          command: yarn flow

  lint:
    docker: 
      - image: circleci/node:8.11.2
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: eslint
          command: yarn eslint
      - run:
          name: stylelint
          command: yarn stylelint

  build:
    docker: 
      - image: circleci/node:8.11.2
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: set stage variable
          command: bash ./.circleci/set-stage-variable.sh
      - run:
          name: build app
          command: |
            if [ "$RADON_STAGE" == "production" ]; then
              export REACT_APP_DOMAIN_NAME="https://XXXXXX"
              export REACT_APP_GOOGLE_ANALYTICS_ID="UA-XXXXXXXXX-X"
              export REACT_APP_FACEBOOK_PIXEL_ID="XXXXXXXXXXXXXXX"
            elif [ "$RADON_STAGE" == "staging" ]; then
              export REACT_APP_DOMAIN_NAME="https://XXXXXX"
              export REACT_APP_GOOGLE_ANALYTICS_ID="UA-XXXXXXXXX-X"
              export REACT_APP_FACEBOOK_PIXEL_ID="XXXXXXXXXXXXXXX"
            elif [ "$RADON_STAGE" == "development" ]; then
              export REACT_APP_DOMAIN_NAME="https://XXXXXX"
              export REACT_APP_GOOGLE_ANALYTICS_ID="UA-XXXXXXXXX-X"
              export REACT_APP_FACEBOOK_PIXEL_ID="XXXXXXXXXXXXXXX"
            else
              echo "Invalid stage. Aborting..."
              exit 1
            fi

            export CI=""
            yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build

  render:
    docker:
      - image: circleci/node:8.11.2-browsers
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: generate rendered pages
          command: npm run render
          working_directory: ./renderer
      - run:
          name: delete index.html from build folder
          command: rm build/index.html
      - run:
          name: move rendered pages to build folder
          command: mv ../renderer/out/* .
          working_directory: ./build
      - persist_to_workspace:
          root: .
          paths:
            - build

  deploy:
    machine:
      enabled: true
    working_directory: ~/radon
    steps:
      - attach_workspace:
          at: ~/radon
      - run:
          name: set stage variable
          command: bash ./.circleci/set-stage-variable.sh
      - run:
          name: add s3 bucket name variable
          command: |
            if [ "$RADON_STAGE" == "production" ]; then
              echo 'export S3_BUCKET_NAME=XXXXXX' >> $BASH_ENV
            elif [ "$RADON_STAGE" == "staging" ]; then
              echo 'export S3_BUCKET_NAME=XXXXXX' >> $BASH_ENV
            elif [ "$RADON_STAGE" == "development" ]; then
              echo "Skipping deployment"
              circleci step halt
            else
              echo "Invalid stage. Aborting..."
              exit 1
            fi
      - run:
          name: gzip files
          command: find build \( -iname '*' ! -iname '*.mp4' \) -exec gzip -9 -n {} \; -exec mv {}.gz {} \;
      - run:
          name: upload non-cached files to s3
          command: aws s3 sync build "s3://$S3_BUCKET_NAME/" --region eu-central-1 --exclude "*" --include "index.html" --include "service-worker.js" --cache-control "max-age=0" --content-encoding "gzip" --delete
      -run:
          name: upload cached files to s3
          command: aws s3 sync build "s3://$S3_BUCKET_NAME/" --region eu-central-1 --exclude "static/*" --exclude "index.html" --exclude "service-worker.js" --include "*" --cache-control "max-age=7776000" --content-encoding "gzip" --delete
      - run:
          name: upload static cached files to s3
          command: aws s3 sync build/static "s3://$S3_BUCKET_NAME/static" --region eu-central-1 --exclude "media/*.mp4" --cache-control "max-age=7776000" --content-encoding "gzip" --delete
      - run:
          name: upload static video files to s3
          command: aws s3 sync build/static "s3://$S3_BUCKET_NAME/static" --region eu-central-1 --exclude "*" --include "media/*.mp4" --cache-control "max-age=7776000" --delete

workflows:
  version: 2
  build-test-lint-deploy:
    jobs:
      - prepare:
          filters:
            tags:
              only: /prod-.*/
      - test:
          requires:
            - prepare
          filters:
            tags:
              only: /prod-.*/
      - flow:
          requires:
            - prepare
          filters:
            tags:
              only: /prod-.*/
      - lint:
          requires:
            - prepare
          filters:
            tags:
              only: /prod-.*/
      - build:
          requires:
            - test
            - flow
            - lint
          filters:
            tags:
              only: /prod-.*/
      - render:
          requires:
            - build
          filters:
            tags:
              only: /prod-.*/
      - deploy:
          context: aws-credentials
          requires:
            - render
          filters:
            tags:
              only: /prod-.*/
